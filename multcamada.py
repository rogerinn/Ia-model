import numpy as np def sigmoid(sum):     return 1 / (1 + np.exp(-sum))def sigmoidDerivada(sig):    return sig * (1 - sig)entradas = np.array([[0,0],                   [0,1],                   [1,0],                   [1,1]])saidas = np.array([[0],[1],[1],[0]])#pesos0 = np.array([[-0.424, -0.740, -0.961],#                   [0.358, -0.577, -0.469]])#pesos1 = np.array([[-0.017], [-0.893], [0.148]])pesos0 = 2*np.random.random((2,3)) -1 pesos1 = 2*np.random.random((3,1)) -1 epocas = 10000000taxaAprendizagem = 0.1momento = 1for j in range(epocas):    camadaEntrada = entradas     somasSinapse0 = np.dot(camadaEntrada, pesos0)    camadaOculta = sigmoid(somasSinapse0)        somasSinapse1 = np.dot(camadaOculta, pesos1)    camadaSaida = sigmoid(somasSinapse1)        erroCamadaSaida = saidas - camadaSaida    mediaAbsoluta = np.mean(np.abs(erroCamadaSaida))    print('Erro:' + str(mediaAbsoluta*100))        derivadaSaida = sigmoidDerivada(camadaSaida)    deltaSaida = erroCamadaSaida * derivadaSaida        pesos1Transposta = pesos1.T    deltaSaidaXPesos = deltaSaida.dot(pesos1Transposta)    deltaCamadaOculta = deltaSaidaXPesos * sigmoidDerivada(camadaOculta)        camadaOcultaTrasposta = camadaOculta.T    pesosNovo1 = camadaOcultaTrasposta.dot(deltaSaida)    pesos1 = (pesos1 * momento) + (pesosNovo1 * taxaAprendizagem)        camadaEntradaTransposta = camadaEntrada.T    pesosNovo0 = camadaEntradaTransposta.dot(deltaCamadaOculta)    pesos0 = (pesos0 * momento) + (pesosNovo0 * taxaAprendizagem)